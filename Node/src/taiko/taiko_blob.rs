use crate::crypto::kzg::{blob_to_kzg_commitment, compute_blob_kzg_proof};
use crate::taiko::taiko_blob_coder::{MAX_BLOB_DATA_SIZE, TaikoBlobCoder};
use alloy::{
    consensus::{Blob, BlobTransactionSidecar, Bytes48, EnvKzgSettings},
    eips::eip4844::BYTES_PER_BLOB,
    primitives::FixedBytes,
};
use anyhow::Error;

pub fn build_taiko_blob_sidecar(data: &[u8]) -> Result<BlobTransactionSidecar, Error> {
    // Split to blob chunks
    let chunks: Vec<&[u8]> = data.chunks(MAX_BLOB_DATA_SIZE).collect();

    let mut blobs: Vec<Blob> = Vec::with_capacity(chunks.len());
    let mut commitments: Vec<Bytes48> = Vec::with_capacity(chunks.len());
    let mut proofs: Vec<Bytes48> = Vec::with_capacity(chunks.len());

    for raw_data_blob in chunks {
        // Encode blob data
        let encoded_blob: Blob = TaikoBlobCoder::encode_blob(raw_data_blob)?;
        // Compute commitment and proof
        let kzg_settings = EnvKzgSettings::Default.get();
        let commitment = blob_to_kzg_commitment(encoded_blob, kzg_settings)?;
        let proof = compute_blob_kzg_proof(encoded_blob, &commitment, kzg_settings)?;
        // Build sidecar
        blobs.push(encoded_blob);
        commitments.push(Bytes48::try_from(commitment.as_ref())?);
        proofs.push(Bytes48::try_from(proof.as_ref())?);
    }

    Ok(BlobTransactionSidecar {
        blobs,
        commitments,
        proofs,
    })
}

mod tests {
    use super::*;

    #[test]
    fn test_build_taiko_blob_sidecar() {
        let data = vec![3u8; 400];
        let sidecar = build_taiko_blob_sidecar(&data).unwrap();
        for s in sidecar.into_iter() {
            println!("{:?}", s.kzg_commitment);
            assert!(s.verify_blob_kzg_proof().is_ok());
        }
    }

    #[test]
    fn test_sidecar_builder_from_data() {
        let data: Vec<u8> = vec![
            0xBE, 0x68, 0xB2, 0x32, 0x82, 0xC8, 0xEC, 0x40, 0x4B, 0x0F, 0xF8, 0x77, 0x33, 0x02,
            0xA0, 0x02, 0x02, 0xE1, 0xE9, 0xAA, 0x74, 0xEA, 0x50, 0x22, 0xD0, 0xAE, 0x47, 0x74,
            0x1F, 0x4B, 0x4A, 0x73, 0xA2, 0x12, 0x16, 0x37, 0x07, 0x01, 0x1F, 0x24, 0x64, 0x56,
            0xAD, 0x41, 0x5F, 0x65, 0x58, 0xB0, 0x82, 0x24, 0x49, 0x25, 0xD9, 0x8F, 0x3D, 0x17,
            0x63, 0x0D, 0x94, 0x89, 0xF7, 0xEB, 0xA2, 0xFC, 0xF6, 0x7D, 0x35, 0x3B, 0xCF, 0xAA,
            0x72, 0x07, 0xA5, 0x18, 0x00, 0xAF, 0xD3, 0x2D, 0x70, 0x2B, 0x92, 0xE1, 0xD8, 0x14,
            0xB8, 0x09, 0xEB, 0x05, 0x05, 0x4E, 0x9D, 0x8A, 0x39, 0x4B, 0xD1, 0x7C, 0x5E, 0xB0,
            0x60, 0xE7, 0xD8, 0x53, 0x1A, 0xE3, 0xDB, 0x02, 0xD6, 0xE4, 0xCC, 0x04, 0xA1, 0xF5,
            0x31, 0x14, 0x79, 0x92, 0xC1, 0x5E, 0x82, 0x42, 0x14, 0x1C, 0x19, 0xAB, 0x89, 0xAA,
            0xC1, 0x1F, 0x3A, 0x6E, 0x5D, 0x15, 0xD1, 0x80, 0x50, 0xE3, 0x60, 0x49, 0xF0, 0x3F,
            0x67, 0xE4, 0x1C, 0x98, 0x54, 0xDC, 0xDA, 0x48, 0xCC, 0x82, 0x6A, 0xD6, 0x64, 0x94,
            0xF3, 0x64, 0x52, 0xD9, 0x25, 0xAD, 0xC5, 0xEB, 0xD3, 0x8E, 0xB3, 0xCD, 0xF4, 0x69,
            0xDF, 0xFC, 0xB7, 0xE4, 0x44, 0xAC, 0xDB, 0x92, 0xDE, 0xF0, 0x6C, 0xAA, 0xDD, 0x12,
            0xF4, 0x6B, 0x3F, 0x62, 0x45, 0xC3, 0xB5, 0x19, 0xEB, 0x32, 0x3E, 0xAD, 0x7B, 0x9D,
            0x61, 0x58, 0xF1, 0x1D,
        ];

        let encoded_blob: Blob = TaikoBlobCoder::encode_blob(&data).unwrap();

        assert_eq!(
            alloy::primitives::keccak256(&encoded_blob),
            FixedBytes::<32>::from_slice(
                &alloy::hex::decode(
                    "f7ae80fe2d0ea322c04bc51e4a89495329f0628fbabacfcf6cc76dba3317bef8"
                )
                .unwrap()
            )
        );
    }
}
